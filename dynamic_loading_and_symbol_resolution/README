1. 
as long as you declare printf, not including <stdio.h> does not affect
 compilation and execution.

gcc -fno-builtin hello.c -o hello.exe; ./hello.exe
readelf -h hello.exe
file hello.exe # dynamic loader, interpreter /lib64/ld-linux-x86-64.so.2

@qianzhang42 ➜ /workspaces/codespaces-blank $ ldd hello.exe 
        linux-vdso.so.1 (0x00007fff96553000)
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x0000768fccb41000)
        /lib64/ld-linux-x86-64.so.2 (0x0000768fccd44000)

/lib64/ld-linux-x86-64.so.2 (0x0000768fccd44000) # dynamic loader
linux-vdso.so.1 (0x00007fff96553000) # some optimization based stuff
/lib/x86_64-linux-gnu/libc.so.6 # CRT, C runtime library, where printf is defined


@qianzhang42 ➜ /workspaces/codespaces-blank $ gcc -static hello.c -o hello.static.exe
@qianzhang42 ➜ /workspaces/codespaces-blank $ ./hello.static.exe

size of hello.static.exe >> size of hello.exe

@qianzhang42 ➜ /workspaces/codespaces-blank $ readelf -S hello.exe
There are 31 section headers, starting at offset 0x3978:

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .interp           PROGBITS         0000000000000318  00000318
       000000000000001c  0000000000000000   A       0     0     1
  [ 2] .note.gnu.propert NOTE             0000000000000338  00000338
       0000000000000020  0000000000000000   A       0     0     8
  [ 3] .note.gnu.build-i NOTE             0000000000000358  00000358
       0000000000000024  0000000000000000   A       0     0     4
  [ 4] .note.ABI-tag     NOTE             000000000000037c  0000037c
       0000000000000020  0000000000000000   A       0     0     4
  [ 5] .gnu.hash         GNU_HASH         00000000000003a0  000003a0
       0000000000000024  0000000000000000   A       6     0     8
  [ 6] .dynsym           DYNSYM           00000000000003c8  000003c8
       00000000000000a8  0000000000000018   A       7     1     8
  [ 7] .dynstr           STRTAB           0000000000000470  00000470
       0000000000000084  0000000000000000   A       0     0     1
  [ 8] .gnu.version      VERSYM           00000000000004f4  000004f4
       000000000000000e  0000000000000002   A       6     0     2
  [ 9] .gnu.version_r    VERNEED          0000000000000508  00000508
       0000000000000020  0000000000000000   A       7     1     8
  [10] .rela.dyn         RELA             0000000000000528  00000528
       00000000000000c0  0000000000000018   A       6     0     8
  [11] .rela.plt         RELA             00000000000005e8  000005e8
       0000000000000018  0000000000000018  AI       6    24     8
  [12] .init             PROGBITS         0000000000001000  00001000
       000000000000001b  0000000000000000  AX       0     0     4
  [13] .plt              PROGBITS         0000000000001020  00001020
       0000000000000020  0000000000000010  AX       0     0     16
  [14] .plt.got          PROGBITS         0000000000001040  00001040
       0000000000000010  0000000000000010  AX       0     0     16
  [15] .plt.sec          PROGBITS         0000000000001050  00001050
       0000000000000010  0000000000000010  AX       0     0     16
  [16] .text             PROGBITS         0000000000001060  00001060
       0000000000000185  0000000000000000  AX       0     0     16
  [17] .fini             PROGBITS         00000000000011e8  000011e8
       000000000000000d  0000000000000000  AX       0     0     4
  [18] .rodata           PROGBITS         0000000000002000  00002000
       0000000000000011  0000000000000000   A       0     0     4
  [19] .eh_frame_hdr     PROGBITS         0000000000002014  00002014
       0000000000000044  0000000000000000   A       0     0     4
  [20] .eh_frame         PROGBITS         0000000000002058  00002058
       0000000000000108  0000000000000000   A       0     0     8
  [21] .init_array       INIT_ARRAY       0000000000003db8  00002db8
       0000000000000008  0000000000000008  WA       0     0     8
  [22] .fini_array       FINI_ARRAY       0000000000003dc0  00002dc0
       0000000000000008  0000000000000008  WA       0     0     8
  [23] .dynamic          DYNAMIC          0000000000003dc8  00002dc8
       00000000000001f0  0000000000000010  WA       7     0     8
  [24] .got              PROGBITS         0000000000003fb8  00002fb8
       0000000000000048  0000000000000008  WA       0     0     8
  [25] .data             PROGBITS         0000000000004000  00003000
       0000000000000010  0000000000000000  WA       0     0     8
  [26] .bss              NOBITS           0000000000004010  00003010
       0000000000000008  0000000000000000  WA       0     0     1
  [27] .comment          PROGBITS         0000000000000000  00003010
       000000000000002b  0000000000000001  MS       0     0     1
  [28] .symtab           SYMTAB           0000000000000000  00003040
       0000000000000618  0000000000000018          29    46     8
  [29] .strtab           STRTAB           0000000000000000  00003658
       0000000000000205  0000000000000000           0     0     1
  [30] .shstrtab         STRTAB           0000000000000000  0000385d
       000000000000011a  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  l (large), p (processor specific)

hello.c
 -> gcc -c 
 -> hello.o (reference unresolved)
 -> resolve symbol in compile time (foo / "hello world %d\n")
 -> still symbols unresolved, printf

gcc hello.c -fno-builtin -Wl,-z,lazy  -o hello.correct_resolve.exe

./hello.correct_resolve.exe
    -> fork
    -> exec
        -> linux kernel load ./hello.correct_resolve.exe into memory
        -> linux kernel find out ./hello.correct_resolve.exe is dynamic linked, so linux kernel find its dynamic loader 
            /lib64/ld-linux-x86-64.so.2
        -> change the return address to be the entry point of the /lib64/ld-linux-x86-64.so.2
    -> /lib64/ld-linux-x86-64.so.2 start to run [USER SPACE]
        -> dyn loader starts to run, dyn loader find out all dynamic lib dependency of executable. linux-vdso.so.1 & /lib/x86_64-linux-gnu/libc.so.6
        -> dyn loader loads all neccesary sharedlib into memory via some system call
        -> dyn loader set the return address to be entry address of executable
    -> executable starts to run
        -> run until printf
        -> call printf@plt [plt = procedure linkage table]
            -> jmpq *offset(%rip)
                -> offset(%rip) [function ptr with name printf@got.plt [got = Global Offset Table]
                -> to be filled the true printf entry]
            -> when called the first time, 
                -> pushq 0x0 # executable
                -> pushq 0x2fe2(%rip) # printf
                -> enter <_dl_runtime_resolve_xsavec>
                -> _dl_runtime_resolve_xsavec would write the true printf entry into offset(%rip)
            -> when called the second time, since offset(%rip) is filled with target function entry, we can directly jump
                    to entry of printf


 @xiangyu-zhang-95 ➜ /workspaces/codespaces-blank $ readelf -r hello.o

Relocation section '.rela.text' at offset 0x2c0 contains 3 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000000025  000a00000004 R_X86_64_PLT32    0000000000000000 foo - 4
000000000034  000500000002 R_X86_64_PC32     0000000000000000 .rodata - 4
00000000003e  000d00000004 R_X86_64_PLT32    0000000000000000 printf - 4

Relocation section '.rela.eh_frame' at offset 0x308 contains 2 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000000020  000200000002 R_X86_64_PC32     0000000000000000 .text + 0
000000000040  000200000002 R_X86_64_PC32     0000000000000000 .text + 13

