hello.c
 -> gcc -c
 -> hello.o (reference unresolved)
 -> resolve symbol in compile time (foo / "hello world %d\n")
 -> still symbols unresolved, printf

gcc hello.c -fno-builtin -Wl,-z,lazy  -o hello.correct_resolve.exe


./hello.correct_resolve.exe
    -> fork
    -> exec
        -> linux kernel load ./hello.correct_resolve.exe into memory
        -> linux kernel find out ./hello.correct_resolve.exe is dynamic linked, so linux kernel find its dynamic loader
            /lib64/ld-linux-x86-64.so.2
        -> change the return address to be the entry point of the /lib64/ld-linux-x86-64.so.2
    -> /lib64/ld-linux-x86-64.so.2 start to run [USER SPACE]
        -> dyn loader starts to run, dyn loader find out all dynamic lib dependency of executable. linux-vdso.so.1 & /lib/x86_64-linux-gnu/libc.s
o.6
        -> dyn loader loads all neccesary sharedlib into memory via some system call
        -> dyn loader set the return address to be entry address of executable
    -> executable starts to run
        -> run until printf
        -> call printf@plt [plt = procedure linkage table]
            -> jmpq *offset(%rip)
                -> offset(%rip) [function ptr with name printf@got.plt [got = Global Offset Table]
                -> to be filled the true printf entry]
            -> when called the first time,
                -> pushq 0x0 # executable
                -> pushq 0x2fe2(%rip) # printf
                -> enter <_dl_runtime_resolve_xsavec>
                -> _dl_runtime_resolve_xsavec would write the true printf entry into offset(%rip)
            -> when called the second time, since offset(%rip) is filled with target function entry, we can directly jump
                    to entry of printf
